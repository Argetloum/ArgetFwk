var RTOOLBAR = {};
(function (e) {
  jQuery.fn.redactor = function (n) {
    return this.each(function () {
      var r = e(this);
      var i = r.data("redactor");
      if (!i)r.data("redactor", i = new t(this, n))
    })
  };
  var t = function (t, n) {
    this.$el = e(t);
    this.opts = e.extend({lang: "en", toolbar: "default", load: true, path: false, css: "style.css", focus: true, resize: true, autoresize: false, fixed: false, autoformat: true, cleanUp: true, convertDivs: true, removeClasses: true, removeStyles: false, convertLinks: true, handler: false, autosave: false, interval: 60, imageGetJson: false, imageUpload: false, linkFileUpload: false, fileUpload: false, visual: true, fullscreen: false, overlay: true, colors: Array("#ffffff", "#000000", "#eeece1", "#1f497d", "#4f81bd", "#c0504d", "#9bbb59", "#8064a2", "#4bacc6", "#f79646", "#ffff00", "#f2f2f2", "#7f7f7f", "#ddd9c3", "#c6d9f0", "#dbe5f1", "#f2dcdb", "#ebf1dd", "#e5e0ec", "#dbeef3", "#fdeada", "#fff2ca", "#d8d8d8", "#595959", "#c4bd97", "#8db3e2", "#b8cce4", "#e5b9b7", "#d7e3bc", "#ccc1d9", "#b7dde8", "#fbd5b5", "#ffe694", "#bfbfbf", "#3f3f3f", "#938953", "#548dd4", "#95b3d7", "#d99694", "#c3d69b", "#b2a2c7", "#b7dde8", "#fac08f", "#f2c314", "#a5a5a5", "#262626", "#494429", "#17365d", "#366092", "#953734", "#76923c", "#5f497a", "#92cddc", "#e36c09", "#c09100", "#7f7f7f", "#0c0c0c", "#1d1b10", "#0f243e", "#244061", "#632423", "#4f6128", "#3f3151", "#31859b", "#974806", "#7f6000"), allEmptyHtml: "<p><br /></p>", mozillaEmptyHtml: "<p> </p>"}, n, this.$el.data());
    this.dropdowns = [];
    this.init()
  };
  t.prototype = {_loadFile: function (t, n) {
    var r = n[0];
    n.splice(0, 1);
    var i;
    if (typeof r == "function")i = r; else i = e.proxy(function () {
      this._loadFile(r, n)
    }, this);
    this.dynamicallyLoad(t, i)
  }, loadFiles: function (e) {
    var t = e[0];
    e.splice(0, 1);
    this._loadFile(t, e)
  }, dynamicallyLoad: function (e, t) {
    var n = document.getElementsByTagName("head")[0];
    var r = document.createElement("script");
    r.src = e;
    var i = false;
    r.onload = r.onreadystatechange = function () {
      if (!i && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) {
        i = true;
        if (t)t();
        r.onload = r.onreadystatechange = null
      }
    };
    n.appendChild(r)
  }, init: function () {
    this.getPath();
    if (this.opts.load) {
      var t = [];
      t.push(this.opts.path + "/langs/" + this.opts.lang + ".js");
      if (this.opts.toolbar !== false)t.push(this.opts.path + "/toolbars/" + this.opts.toolbar + ".js");
      t.push(e.proxy(this.start, this));
      this.loadFiles(t)
    } else this.start()
  }, start: function () {
    this.height = this.$el.css("height");
    this.width = this.$el.css("width");
    this.build();
    var t = this.$el.val();
    t = this.preformater(t);
    if (this.opts.autoformat)t = this.paragraphy(t);
    this.$editor = this.enable(t);
    e(this.doc).click(e.proxy(function (e) {
      this.$editor.focus()
    }, this));
    e(this.doc).bind("paste", e.proxy(function (t) {
      setTimeout(e.proxy(function () {
        var t = e('<span id="pastemarkerend"> </span>');
        this.insertNodeAtCaret(t.get(0));
        this.pasteCleanUp()
      }, this), 200)
    }, this));
    e(this.doc).keypress(e.proxy(function (e) {
      var t = e.keyCode || e.which;
      if (navigator.userAgent.indexOf("AppleWebKit") != -1)return this.safariShiftKeyEnter(e, t)
    }, this)).keyup(e.proxy(function (e) {
      var t = e.keyCode || e.which;
      if (this.opts.autoformat) {
        if (t == 8 || t == 46)return this.formatEmpty(e);
        if (t == 13 && !e.shiftKey && !e.ctrlKey && !e.metaKey)return this.formatNewLine(e)
      }
      this.syncCode()
    }, this));
    this.buildToolbar();
    if (this.opts.autoresize === false)this.buildResizer(); else this.observeAutoResize();
    this.shortcuts();
    this.autoSave();
    this.observeImages();
    if (this.opts.fullscreen) {
      this.opts.fullscreen = false;
      this.fullscreen()
    }
    if (this.opts.focus)this.focus();
    if (this.opts.fixed) {
      this.observeScroll();
      e(document).scroll(e.proxy(this.observeScroll, this))
    }
  }, shortcuts: function () {
    e(this.doc).keydown(e.proxy(function (e) {
      var t = e.keyCode || e.which;
      if (e.ctrlKey) {
        if (t == 90)this._shortcuts(e, "undo"); else if (t == 90 && e.shiftKey)this._shortcuts(e, "redo"); else if (t == 77)this._shortcuts(e, "removeFormat"); else if (t == 66)this._shortcuts(e, "bold"); else if (t == 73)this._shortcuts(e, "italic"); else if (t == 74)this._shortcuts(e, "insertunorderedlist"); else if (t == 75)this._shortcuts(e, "insertorderedlist"); else if (t == 76)this._shortcuts(e, "superscript")
      }
      if (!e.shiftKey && t == 9)this._shortcuts(e, "indent"); else if (e.shiftKey && t == 9)this._shortcuts(e, "outdent")
    }, this))
  }, _shortcuts: function (e, t) {
    if (e.preventDefault)e.preventDefault();
    this.execCommand(t, null)
  }, getPath: function () {
    if (this.opts.path !== false)return this.opts.path;
    e("script").each(e.proxy(function (e, t) {
      if (t.src) {
        var n = new RegExp(/\/redactor(\.min)?\.js(\?.*)?/);
        if (t.src.match(n))this.opts.path = t.src.replace(n, "")
      }
    }, this))
  }, build: function () {
    this.$box = e('<div class="redactor_box"></div>');
    this.$frame = e('<iframe frameborder="0" scrolling="auto" style="height: ' + this.height + ';" class="redactor_frame"></iframe>');
    this.$el.css("width", "100%").hide();
    this.$box.insertAfter(this.$el).append(this.$frame).append(this.$el)
  }, write: function (e) {
    this.doc.open();
    this.doc.write(e);
    this.doc.close()
  }, enable: function (t) {
    this.doc = this.getDoc(this.$frame.get(0));
    if (this.doc !== null) {
      this.write(this.setDoc(t));
      if (e.browser.mozilla)this.doc.execCommand("useCSS", false, true);
      return e(this.doc).find("#page")
    } else return false
  }, setDoc: function (e) {
    var t = "<!DOCTYPE html>\n";
    t += '<html><head><link media="all" type="text/css" href="' + this.opts.path + "/css/" + this.opts.css + '" rel="stylesheet"></head>';
    t += '<body><div id="page" contenteditable="true">';
    t += e;
    t += "</div></body></html>";
    return t
  }, getDoc: function (e) {
    if (e.contentDocument)return e.contentDocument; else if (e.contentWindow && e.contentWindow.document)return e.contentWindow.document; else if (e.document)return e.document; else return null
  }, focus: function () {
    this.$editor.focus()
  }, syncCode: function () {
    var e = this.formating(this.$editor.html());
    this.$el.val(e)
  }, setCode: function (e) {
    e = this.preformater(e);
    this.$editor.html(e).focus();
    this.syncCode()
  }, getCode: function () {
    var e = this.$editor ? this.$editor.html() : this.$el.val();
    e = this.reformater(e);
    return e
  }, insertHtml: function (e) {
    this.execCommand("inserthtml", e)
  }, destroy: function () {
    var e = this.getCode();
    this.$box.after(this.$el);
    this.$box.remove();
    this.$el.val(e).show();
    this.dropdowns.forEach(function (e, t) {
      e.remove();
      delete this.dropdowns[t]
    }, this)
  }, handler: function () {
    e.ajax({url: this.opts.handler, type: "post", data: "redactor=" + escape(encodeURIComponent(this.getCode())), success: e.proxy(function (e) {
      this.setCode(e);
      this.syncCode()
    }, this)})
  }, observeImages: function () {
    if (e.browser.mozilla)this.doc.execCommand("enableObjectResizing", false, "false");
    e(this.doc).find("img").attr("unselectable", "on").each(e.proxy(function (e, t) {
      this.resizeImage(t)
    }, this))
  }, observeScroll: function () {
    var t = e(document).scrollTop();
    var n = this.$box.offset().top;
    if (t > n) {
      this.fixed = true;
      this.$toolbar.css({position: "fixed", width: "100%"})
    } else {
      this.fixed = false;
      this.$toolbar.css({position: "relative", width: "auto"})
    }
  }, observeAutoResize: function () {
    this.$editor.css({"min-height": this.$el.height() + "px"});
    this.$frame.css({"overflow-x": "auto", "overflow-y": "hidden"});
    this.$frame.load(e.proxy(this.setAutoSize, this));
    e(this.doc).keyup(e.proxy(this.setAutoSize, this))
  }, setAutoSize: function () {
    this.$frame.height(this.$editor.outerHeight(true) + 30)
  }, execCommand: function (t, n) {
    if (this.opts.visual && this.doc) {
      try {
        if (e.browser.msie)this.focus();
        if (t == "inserthtml" && e.browser.msie)this.doc.selection.createRange().pasteHTML(n); else if (t == "formatblock" && e.browser.msie)this.doc.execCommand(t, false, "<" + n + ">"); else {
          this.doc.execCommand(t, false, n)
        }
        this.syncCode();
        this.focus()
      } catch (r) {
      }
    }
  }, formatNewLine: function (t) {
    var n = this.getParentNode();
    if (n.nodeName == "DIV" && n.id == "page") {
      if (t.preventDefault)t.preventDefault();
      element = e(this.getCurrentNode());
      if (element.get(0).tagName == "DIV" && (element.html() == "" || element.html() == "<br>")) {
        newElement = e("<p>").append(element.clone().get(0).childNodes);
        element.replaceWith(newElement);
        newElement.html("<br />");
        this.setFocusNode(newElement.get(0));
        this.syncCode();
        return false
      } else this.syncCode();
      if (this.opts.convertLinks)this.$editor.linkify()
    } else {
      this.syncCode();
      return true
    }
  }, safariShiftKeyEnter: function (t, n) {
    if (t.shiftKey && n == 13) {
      if (t.preventDefault)t.preventDefault();
      var r = e("<span><br /></span>");
      this.insertNodeAtCaret(r.get(0));
      this.setFocusNode(r.get(0));
      this.syncCode();
      return false
    }
  }, formatEmpty: function (t) {
    var n = e.trim(this.$editor.html());
    if (e.browser.mozilla)n = n.replace(/<br>/gi, "");
    if (n === "") {
      if (t.preventDefault)t.preventDefault();
      var r = this.opts.allEmptyHtml;
      if (e.browser.mozilla)r = this.opts.mozillaEmptyHtml;
      var i = e(r).get(0);
      this.$editor.html(i);
      this.setFocusNode(i);
      this.syncCode();
      return false
    } else this.syncCode()
  }, paragraphy: function (t) {
    t = e.trim(t);
    if (t === "") {
      if (!e.browser.mozilla)return this.opts.allEmptyHtml; else return this.opts.mozillaEmptyHtml
    }
    if (this.opts.convertDivs)t = t.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "<p>$2</p>");
    var n = function (e, t, n) {
      return e.replace(new RegExp(t, "g"), n)
    };
    var r = function (e, r) {
      return n(t, e, r)
    };
    var i = "(table|thead|tfoot|caption|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|form|blockquote|address|math|style|script|object|input|param|p|h[1-6])";
    t += "\n";
    r("<br />\\s*<br />", "\n\n");
    r("(<" + i + "[^>]*>)", "\n$1");
    r("(</" + i + ">)", "$1\n\n");
    r("\r\n|\r", "\n");
    r("\n\n+", "\n\n");
    r("\n?((.|\n)+?)$", "<p>$1</p>\n");
    r("<p>\\s*?</p>", "");
    r("<p>(<div[^>]*>\\s*)", "$1<p>");
    r("<p>([^<]+)\\s*?(</(div|address|form)[^>]*>)", "<p>$1</p>$2");
    r("<p>\\s*(</?" + i + "[^>]*>)\\s*</p>", "$1");
    r("<p>(<li.+?)</p>", "$1");
    r("<p>\\s*(</?" + i + "[^>]*>)", "$1");
    r("(</?" + i + "[^>]*>)\\s*</p>", "$1");
    r("(</?" + i + "[^>]*>)\\s*<br />", "$1");
    r("<br />(\\s*</?(p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)", "$1");
    if (t.indexOf("<pre") != -1) {
      r("(<pre(.|\n)*?>)((.|\n)*?)</pre>", function (e, t, r, i) {
        return n(t, "\\\\(['\"\\\\])", "$1") + n(n(n(i, "<p>", "\n"), "</p>|<br />", ""), "\\\\(['\"\\\\])", "$1") + "</pre>"
      })
    }
    return r("\n</p>$", "</p>")
  }, preformater: function (e) {
    e = e.replace(/<br>/gi, "<br />");
    e = e.replace(/<blockquote\b[^>]*>([\w\W]*?)<p>([\w\W]*?)<\/p>([\w\W]*?)<\/blockquote[^>]*>/gi, "<blockquote>$1$2<br />$3</blockquote>");
    e = e.replace(/<strong\b[^>]*>([\w\W]*?)<\/strong[^>]*>/gi, "<b>$1</b>");
    e = e.replace(/<em\b[^>]*>([\w\W]*?)<\/em[^>]*>/gi, "<i>$1</i>");
    e = e.replace(/<del\b[^>]*>([\w\W]*?)<\/del[^>]*>/gi, "<strike>$1</strike>");
    return e
  }, reformater: function (e) {
    e = e.replace(/<br>/gi, "<br />");
    e = e.replace(/<b\b[^>]*>([\w\W]*?)<\/b[^>]*>/gi, "<strong>$1</strong>");
    e = e.replace(/<i\b[^>]*>([\w\W]*?)<\/i[^>]*>/gi, "<em>$1</em>");
    e = e.replace(/<strike\b[^>]*>([\w\W]*?)<\/strike[^>]*>/gi, "<del>$1</del>");
    e = e.replace(/<span(.*?)style="font-weight: bold;">([\w\W]*?)<\/span>/gi, "<strong>$2</strong>");
    e = e.replace(/<span(.*?)style="font-style: italic;">([\w\W]*?)<\/span>/gi, "<em>$2</em>");
    e = e.replace(/<span(.*?)style="font-weight: bold; font-style: italic;">([\w\W]*?)<\/span>/gi, "<em><strong>$2</strong></em>");
    e = e.replace(/<span(.*?)style="font-style: italic; font-weight: bold;">([\w\W]*?)<\/span>/gi, "<strong><em>$2</em></strong>");
    return e
  }, cleanUpClasses: function (e) {
    e = e.replace(/\s*class="TOC(.*?)"/gi, "");
    e = e.replace(/\s*class="Heading(.*?)"/gi, "");
    e = e.replace(/\s*class="Body(.*?)"/gi, "");
    return e
  }, cleanUpStyles: function (e) {
    e = e.replace(/\s*mso-[^:]+:[^;"]+;?/gi, "");
    e = e.replace(/\s*margin(.*?)pt\s*;/gi, "");
    e = e.replace(/\s*margin(.*?)cm\s*;/gi, "");
    e = e.replace(/\s*text-indent:(.*?)\s*;/gi, "");
    e = e.replace(/\s*line-height:(.*?)\s*;/gi, "");
    e = e.replace(/\s*page-break-before: [^\s;]+;?"/gi, '"');
    e = e.replace(/\s*font-variant: [^\s;]+;?"/gi, '"');
    e = e.replace(/\s*tab-stops:[^;"]*;?/gi, "");
    e = e.replace(/\s*tab-stops:[^"]*/gi, "");
    e = e.replace(/\s*face="[^"]*"/gi, "");
    e = e.replace(/\s*face=[^ >]*/gi, "");
    e = e.replace(/\s*font:(.*?);/gi, "");
    e = e.replace(/\s*font-size:(.*?);/gi, "");
    e = e.replace(/\s*font-weight:(.*?);/gi, "");
    e = e.replace(/\s*font-family:[^;"]*;?/gi, "");
    e = e.replace(/<span style="Times New Roman"">\s\n<\/span>/gi, "");
    return e
  }, cleanUp: function (e) {
    e = e.replace(/(<\!\-\-([\w\W]*?)\-\->)/ig, "");
    if (this.opts.convertDivs) {
      e = e.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "<p$1>$2</p>")
    }
    e = e.replace(/ lang="([\w\W]*?)"/gi, "");
    e = e.replace(/<a name="(.*?)">([\w\W]*?)<\/a>/gi, "");
    e = e.replace(/\ \ \ /gi, " ");
    e = e.replace(/\ \ /gi, " ");
    e = e.replace(/<o:p>(.*?)<\/o:p>/gi, "");
    e = e.replace(/\s*style="\s*"/gi, "");
    e = e.replace(/<span> <\/span>/gi, "");
    e = e.replace(/<span>([\w\W]*?)<\/span>/gi, "$1");
    return e
  }, removeTags: function (e) {
    return e.replace(/<(?!\s*\/?(code|span|div|label|a|br|p|b|i|del|strike|img|video|audio|iframe|object|embed|param|blockquote|mark|cite|small|ul|ol|li|hr|dl|dt|dd|sup|sub|big|pre|code|figure|figcaption|strong|em|table|tr|td|th|tbody|thead|tfoot|h1|h2|h3|h4|h5|h6)\b)[^>]+>/gi, "")
  }, pasteCleanUp: function () {
    var t = this.$editor.html();
    t = t.replace(/<span id="pastemarkerend"> <\/span>/, "#marker#");
    t = this.formating(t);
    t = this.cleanUp(t);
    if (this.opts.removeClasses)t = t.replace(/ class="([\w\W]*?)"/gi, ""); else t = this.cleanUpClasses(t);
    if (this.opts.removeStyles)t = t.replace(/ style="([\w\W]*?)"/gi, ""); else t = this.cleanUpStyles(t);
    t = this.cleanUp(t);
    t = this.formating(t);
    t = t.replace(/<b(.*?)id="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$3");
    t = t.replace(/#marker#/, '<span id="pastemarkerend"> </span>');
    this.$editor.html(t);
    var n = e(this.doc.body).find("#pastemarkerend").get(0);
    this.setFocusNode(n);
    this.syncCode();
    this.observeImages()
  }, formating: function (t) {
    if (e.browser.msie) {
      t = t.replace(/<*(\/ *)?(\w+)/g, function (e) {
        return e.toLowerCase()
      });
      t = t.replace(/style="(.*?)"/g, function (e) {
        return e.toLowerCase()
      });
      t = t.replace(/ jQuery(.*?)=\"(.*?)\"/gi, "")
    }
    t = t.replace(/<font([\w\W]*?)color="(.*?)">([\w\W]*?)<\/font\>/gi, '<span style="color: $2;">$3</span>');
    t = t.replace(/<font([\w\W]*?)>([\w\W]*?)<\/font\>/gi, "<span$1>$2</span>");
    t = t.replace(/<span>([\w\W]*?)<\/span>/gi, "$1");
    t = t.replace(/ class="Apple-style-span"/gi, "");
    t = t.replace(/ class="Apple-tab-span"/gi, "");
    t = t.replace(/<p><p>/g, "<p>");
    t = t.replace(/<\/p><\/p>/g, "</p>");
    t = t.replace(/<hr(.*?)>/g, "<hr />");
    t = t.replace(/<p> /g, "<p>");
    t = t.replace(/<p><ul>/g, "<ul>");
    t = t.replace(/<p><ol>/g, "<ol>");
    t = t.replace(/<\/ul><\/p>/g, "</ul>");
    t = t.replace(/<\/ol><\/p>/g, "</ol>");
    t = t.replace(/<p(.*?)> <\/p>/gi, "");
    t = t.replace(/[\t]*/g, "");
    t = t.replace(/\n\s*\n/g, "\n");
    t = t.replace(/^[\s\n]*/, "");
    t = t.replace(/[\s\n]*$/, "");
    var n = ["<pre></pre>", "<blockquote>\\s*</blockquote>", "<em>\\s*</em>", "<b>\\s*</b>", "<ul></ul>", "<ol></ol>", "<li></li>", "<table></table>", "<tr></tr>", "<span>\\s*<span>", "<span> <span>", "<p>\\s*</p>", "<p> </p>", "<div>\\s*</div>", "<div>\\s*<br>\\s*</div>"];
    for (var r = 0; r < n.length; ++r) {
      var i = n[r];
      t = t.replace(new RegExp(i, "gi"), "")
    }
    var s = "\r\n";
    var o = ["<form", "<fieldset", "<legend", "<object", "<embed", "<select", "<option", "<input", "<textarea", "<pre", "<blockquote", "<ul", "<ol", "<li", "<dl", "<dt", "<dd", "<table", "<thead", "<tbody", "<caption", "</caption>", "<th", "<tr", "<td", "<figure"];
    for (var r = 0; r < o.length; ++r) {
      var u = o[r];
      t = t.replace(new RegExp(u, "gi"), s + u)
    }
    var a = ["</p>", "</div>", "</ul>", "</ol>", "</h1>", "</h2>", "</h3>", "</h4>", "</h5>", "</h6>", "<br>", "<br />", "</dl>", "</dt>", "</dd>", "</form>", "</blockquote>", "</pre>", "</legend>", "</fieldset>", "</object>", "</embed>", "</textarea>", "</select>", "</option>", "</table>", "</thead>", "</tbody>", "</tr>", "</td>", "</th>", "</figure>"];
    for (var r = 0; r < a.length; ++r) {
      var f = a[r];
      t = t.replace(new RegExp(f, "gi"), f + s)
    }
    t = t.replace(/<li/g, "	<li");
    t = t.replace(/<tr/g, "	<tr");
    t = t.replace(/<td/g, "		<td");
    t = t.replace(/<\/tr>/g, "	</tr>");
    return t
  }, toggle: function () {
    var t;
    if (this.opts.visual) {
      this.$frame.hide();
      t = this.$editor.html();
      t = e.trim(this.formating(t));
      this.$el.val(t).show().focus();
      this.setBtnActive("html");
      this.opts.visual = false
    } else {
      this.$el.hide();
      this.$editor.html(this.$el.val());
      this.$frame.show();
      if (this.$editor.html() === "") {
        if (!e.browser.mozilla)t = this.opts.allEmptyHtml; else t = this.opts.mozillaEmptyHtml;
        this.setCode(t)
      }
      this.focus();
      this.setBtnInactive("html");
      this.opts.visual = true;
      this.observeImages()
    }
  }, autoSave: function () {
    if (this.opts.autosave === false)return false;
    setInterval(e.proxy(function () {
      e.post(this.opts.autosave, {data: this.getCode()})
    }, this), this.opts.interval * 1e3)
  }, buildToolbar: function () {
    if (this.opts.toolbar === false)return false;
    this.$toolbar = e("<ul>").addClass("redactor_toolbar");
    this.$box.prepend(this.$toolbar);
    e.each(RTOOLBAR[this.opts.toolbar], e.proxy(function (t, n) {
      if (this.opts.fileUpload === false && t == "file")return true;
      var r = e("<li>");
      if (t == "fullscreen")e(r).addClass("redactor_toolbar_right");
      var i = this.buildButton(t, n);
      if (t == "backcolor" || t == "fontcolor" || typeof n.dropdown != "undefined") {
        var s = e('<div class="redactor_dropdown" style="display: none;">');
        if (t == "backcolor" || t == "fontcolor")s = this.buildColorPicker(s, t); else s = this.buildDropdown(s, n.dropdown);
        this.dropdowns.push(s.appendTo(e(document.body)));
        this.hdlHideDropDown = e.proxy(function (e) {
          this.hideDropDown(e, s, t)
        }, this);
        this.hdlShowDropDown = e.proxy(function (e) {
          this.showDropDown(e, s, t)
        }, this);
        i.click(this.hdlShowDropDown)
      }
      this.$toolbar.append(e(r).append(i));
      if (typeof n.separator != "undefined")this.$toolbar.append(e('<li class="redactor_separator"></li>'))
    }, this));
    e(document).click(this.hdlHideDropDown);
    e(this.doc).click(this.hdlHideDropDown)
  }, buildButton: function (t, n) {
    var r = e('<a href="javascript:void(null);" title="' + n.title + '" class="redactor_btn_' + t + '"><span> </span></a>');
    if (typeof n.func == "undefined")r.click(e.proxy(function () {
      this.execCommand(n.exec, t)
    }, this)); else if (n.func != "show")r.click(e.proxy(function (e) {
      this[n.func](e)
    }, this));
    return r
  }, buildDropdown: function (t, n) {
    e.each(n, e.proxy(function (n, r) {
      if (typeof r.style == "undefined")r.style = "";
      var i;
      if (r.name == "separator")i = e('<a class="redactor_separator_drop">'); else {
        i = e('<a href="javascript:void(null);" style="' + r.style + '">' + r.title + "</a>");
        if (typeof r.func == "undefined")e(i).click(e.proxy(function () {
          this.execCommand(r.exec, n)
        }, this)); else e(i).click(e.proxy(function (e) {
          this[r.func](e)
        }, this))
      }
      e(t).append(i)
    }, this));
    return t
  }, buildColorPicker: function (t, n) {
    var r;
    if (n == "backcolor") {
      if (e.browser.msie)r = "BackColor"; else r = "hilitecolor"
    } else r = "forecolor";
    e(t).width(210);
    var i = this.opts.colors.length;
    for (var s = 0; s < i; ++s) {
      var o = this.opts.colors[s];
      var u = e('<a rel="' + o + '" href="javascript:void(null);" class="redactor_color_link"></a>').css({backgroundColor: o});
      e(t).append(u);
      var a = this;
      e(u).click(function () {
        a.execCommand(r, e(this).attr("rel"))
      })
    }
    var f = e('<a href="javascript:void(null);" class="redactor_color_none"></a>').html(RLANG.none);
    if (n == "backcolor")f.click(e.proxy(this.setBackgroundNone, this)); else f.click(e.proxy(this.setColorNone, this));
    e(t).append(f);
    return t
  }, setBackgroundNone: function () {
    e(this.getParentNode()).css("background-color", "transparent");
    this.syncCode()
  }, setColorNone: function () {
    e(this.getParentNode()).attr("color", "").css("color", "");
    this.syncCode()
  }, showDropDown: function (t, n, r) {
    this.hideAllDropDown();
    this.setBtnActive(r);
    this.getBtn(r).addClass("dropact");
    var i = this.getBtn(r).offset().left;
    if (this.opts.fixed && this.fixed) {
      e(n).css({position: "fixed", left: i + "px", top: "30px"}).show()
    } else {
      var s = this.$toolbar.offset().top + 30;
      e(n).css({position: "absolute", left: i + "px", top: s + "px"}).show()
    }
  }, hideAllDropDown: function () {
    this.$toolbar.find("a.dropact").removeClass("act").removeClass("dropact");
    e(".redactor_dropdown").hide()
  }, hideDropDown: function (t, n, r) {
    if (!e(t.target).parent().hasClass("dropact")) {
      e(n).removeClass("act");
      this.showedDropDown = false;
      this.hideAllDropDown()
    }
  }, getSelection: function () {
    if (this.$frame.get(0).contentWindow.getSelection)return this.$frame.get(0).contentWindow.getSelection(); else if (this.$frame.get(0).contentWindow.document.selection)return this.$frame.get(0).contentWindow.document.selection.createRange()
  }, getParentNode: function () {
    if (window.getSelection)return this.getSelection().getRangeAt(0).startContainer.parentNode; else if (document.selection)return this.getSelection().parentElement()
  }, getCurrentNode: function () {
    if (window.getSelection)return this.getSelection().getRangeAt(0).startContainer; else if (document.selection)return this.getSelection()
  }, setFocusNode: function (e, t) {
    var n = this.doc.createRange();
    var r = this.getSelection();
    t = t ? 0 : 1;
    if (r !== null) {
      n.selectNodeContents(e);
      r.addRange(n);
      r.collapse(e, t)
    }
    this.focus()
  }, insertNodeAtCaret: function (e) {
    if (typeof window.getSelection != "undefined") {
      var t = this.getSelection();
      if (t.rangeCount) {
        var n = t.getRangeAt(0);
        n.collapse(false);
        n.insertNode(e);
        n = n.cloneRange();
        n.selectNodeContents(e);
        n.collapse(false);
        t.removeAllRanges();
        t.addRange(n)
      }
    } else if (typeof document.selection != "undefined" && document.selection.type != "Control") {
      var r = e.nodeType == 1 ? e.outerHTML : e.data;
      var i = "marker_" + ("" + Math.random()).slice(2);
      r += '<span id="' + i + '"></span>';
      var s = this.getSelection();
      s.collapse(false);
      s.pasteHTML(r);
      var o = document.getElementById(i);
      s.moveToElementText(o);
      s.select();
      o.parentNode.removeChild(o)
    }
  }, getBtn: function (t) {
    return e(this.$toolbar.find("a.redactor_btn_" + t))
  }, setBtnActive: function (e) {
    this.getBtn(e).addClass("act")
  }, setBtnInactive: function (e) {
    this.getBtn(e).removeClass("act")
  }, changeBtnIcon: function (e, t) {
    this.getBtn(e).addClass("redactor_btn_" + t)
  }, removeBtnIcon: function (e, t) {
    this.getBtn(e).removeClass("redactor_btn_" + t)
  }, removeBtn: function (e) {
    this.getBtn(e).remove()
  }, addBtn: function (t, n) {
    this.$toolbar.append(e("<li>").append(this.buildButton(t, n)))
  }, fullscreen: function () {
    var t;
    if (this.opts.fullscreen === false) {
      this.changeBtnIcon("fullscreen", "normalscreen");
      this.setBtnActive("fullscreen");
      this.opts.fullscreen = true;
      this.height = this.$frame.css("height");
      this.width = this.$box.width() - 2 + "px";
      t = this.getCode();
      this.tmpspan = e("<span></span>");
      this.$box.addClass("redactor_box_fullscreen").after(this.tmpspan);
      e(document.body).prepend(this.$box).css("overflow", "hidden");
      this.$editor = this.enable(t);
      e(this.doc).click(e.proxy(this.hideAllDropDown, this));
      e(this.doc).click(e.proxy(function (e) {
        this.$editor.focus()
      }, this));
      this.observeImages();
      this.$box.find(".redactor_resizer").hide();
      this.fullScreenResize();
      e(window).resize(e.proxy(this.fullScreenResize, this));
      e(document).scrollTop(0, 0);
      this.focus()
    } else {
      this.removeBtnIcon("fullscreen", "normalscreen");
      this.setBtnInactive("fullscreen");
      this.opts.fullscreen = false;
      e(window).unbind("resize", e.proxy(this.fullScreenResize, this));
      e(document.body).css("overflow", "");
      t = this.getCode();
      this.$box.removeClass("redactor_box_fullscreen").css("width", "auto");
      this.tmpspan.after(this.$box).remove();
      this.$editor = this.enable(t);
      this.observeImages();
      this.observeAutoResize();
      this.$box.find(".redactor_resizer").show();
      e(this.doc).click(e.proxy(this.hideAllDropDown, this));
      e(this.doc).click(e.proxy(function (e) {
        this.$editor.focus()
      }, this));
      this.syncCode();
      this.$frame.css("height", this.height);
      this.$el.css("height", this.height);
      this.focus()
    }
  }, fullScreenResize: function () {
    if (this.opts.fullscreen === false)return;
    var t = 42;
    if (this.opts.air)t = 2;
    var n = e(window).height() - t;
    this.$box.width(e(window).width() - 2);
    this.$frame.height(n);
    this.$el.height(n)
  }, buildResizer: function () {
    if (this.opts.resize === false)return false;
    this.$resizer = e('<div class="redactor_resizer">—</div>');
    this.$box.append(this.$resizer);
    this.$resizer.mousedown(e.proxy(this.initResize, this))
  }, initResize: function (t) {
    if (t.preventDefault)t.preventDefault();
    this.splitter = t.target;
    if (this.opts.visual) {
      this.element_resize = this.$frame;
      this.element_resize.get(0).style.visibility = "hidden";
      this.element_resize_parent = this.$el
    } else {
      this.element_resize = this.$el;
      this.element_resize_parent = this.$frame
    }
    this.stopResizeHdl = e.proxy(this.stopResize, this);
    this.startResizeHdl = e.proxy(this.startResize, this);
    this.resizeHdl = e.proxy(this.resize, this);
    e(document).mousedown(this.startResizeHdl);
    e(document).mouseup(this.stopResizeHdl);
    e(this.splitter).mouseup(this.stopResizeHdl);
    this.null_point = false;
    this.h_new = false;
    this.h = this.element_resize.height()
  }, startResize: function () {
    e(document).mousemove(this.resizeHdl)
  }, resize: function (e) {
    if (e.preventDefault)e.preventDefault();
    var t = e.pageY;
    if (this.null_point === false)this.null_point = t;
    if (this.h_new === false)this.h_new = this.element_resize.height();
    var n = this.h_new + t - this.null_point - 10;
    if (n <= 30)return true;
    if (n >= 0) {
      this.element_resize.get(0).style.height = n + "px";
      this.element_resize_parent.get(0).style.height = n + "px"
    }
  }, stopResize: function (t) {
    e(document).unbind("mousemove", this.resizeHdl);
    e(document).unbind("mousedown", this.startResizeHdl);
    e(document).unbind("mouseup", this.stopResizeHdl);
    e(this.splitter).unbind("mouseup", this.stopResizeHdl);
    this.element_resize.get(0).style.visibility = "visible"
  }, resizeImage: function (t) {
    var n = false;
    var r = false;
    var i;
    var s;
    var o = e(t).width() / e(t).height();
    var u = 1;
    var a = 1;
    var f = 1;
    var l = 1;
    e(t).hover(function () {
      e(t).css("cursor", "nw-resize")
    }, function () {
      e(t).css("cursor", "default");
      n = false
    });
    e(t).mousedown(function (o) {
      if (o.preventDefault)o.preventDefault();
      n = true;
      r = true;
      i = Math.round(o.pageX - e(t).eq(0).offset().left);
      s = Math.round(o.pageY - e(t).eq(0).offset().top)
    });
    e(t).mouseup(e.proxy(function (e) {
      n = false;
      this.syncCode()
    }, this));
    e(t).click(e.proxy(function (e) {
      if (r)this.imageEdit(e)
    }, this));
    e(t).mousemove(function (c) {
      if (n) {
        r = false;
        var h = Math.round(c.pageX - e(this).eq(0).offset().left) - i;
        var p = Math.round(c.pageY - e(this).eq(0).offset().top) - s;
        var d = e(t).height();
        var v = parseInt(d) + p;
        var m = v * o;
        if (a == 1 || typeof a == "number" && m < a && m > f) {
          e(t).width(m)
        }
        if (u == 1 || typeof u == "number" && v < u && v > l) {
          e(t).height(v)
        }
        i = Math.round(c.pageX - e(this).eq(0).offset().left);
        s = Math.round(c.pageY - e(this).eq(0).offset().top)
      }
    })
  }, showTable: function () {
    this.modalInit(RLANG.table, this.opts.path + "/plugins/table.html", 300, e.proxy(function () {
      e("#redactor_table_rows").focus();
      e("#redactor_insert_table_btn").click(e.proxy(this.insertTable, this))
    }, this))
  }, insertTable: function () {
    var t = e("#redactor_table_rows").val();
    var n = e("#redactor_table_columns").val();
    var r = e("<div></div>");
    var i = Math.floor(Math.random() * 99999);
    var s = e('<table id="table' + i + '"><tbody></tbody></table>');
    for (var o = 0; o < t; o++) {
      var u = e("<tr></tr>");
      for (var a = 0; a < n; a++) {
        var f = e("<td> </td>");
        e(u).append(f)
      }
      e(s).append(u)
    }
    e(r).append(s);
    var l = e(r).html();
    if (e.browser.msie)l += "<p></p>"; else l += "<p> </p>";
    this.execCommand("inserthtml", l);
    this.modalClose();
    this.$table = e(this.doc).find("body").find("#table" + i);
    this.$table.click(e.proxy(this.tableObserver, this))
  }, tableObserver: function (t) {
    this.$table = e(t.target).parents("table");
    this.$table_tr = this.$table.find("tr");
    this.$table_td = this.$table.find("td");
    this.$table_td.removeClass("current");
    this.$tbody = e(t.target).parents("tbody");
    this.$thead = e(this.$table).find("thead");
    this.$current_td = e(t.target);
    this.$current_td.addClass("current");
    this.$current_tr = e(t.target).parents("tr")
  }, deleteTable: function () {
    e(this.$table).remove();
    this.$table = false;
    this.syncCode()
  }, deleteRow: function () {
    e(this.$current_tr).remove();
    this.syncCode()
  }, deleteColumn: function () {
    var t = e(this.$current_td).get(0).cellIndex;
    e(this.$table).find("tr").each(function () {
      e(this).find("td").eq(t).remove()
    });
    this.syncCode()
  }, addHead: function () {
    if (e(this.$table).find("thead").size() !== 0)this.deleteHead(); else {
      var t = e(this.$table).find("tr").first().clone();
      t.find("td").html(" ");
      this.$thead = e("<thead></thead>");
      this.$thead.append(t);
      e(this.$table).prepend(this.$thead);
      this.syncCode()
    }
  }, deleteHead: function () {
    e(this.$thead).remove();
    this.$thead = false;
    this.syncCode()
  }, insertRowAbove: function () {
    this.insertRow("before")
  }, insertRowBelow: function () {
    this.insertRow("after")
  }, insertColumnLeft: function () {
    this.insertColumn("before")
  }, insertColumnRight: function () {
    this.insertColumn("after")
  }, insertRow: function (t) {
    var n = e(this.$current_tr).clone();
    n.find("td").html(" ");
    if (t == "after")e(this.$current_tr).after(n); else e(this.$current_tr).before(n);
    this.syncCode()
  }, insertColumn: function (t) {
    var n = 0;
    this.$current_td.addClass("current");
    this.$current_tr.find("td").each(function (t, r) {
      if (e(r).hasClass("current"))n = t
    });
    this.$table_tr.each(function (r, i) {
      var s = e(i).find("td").eq(n);
      var o = s.clone();
      o.html(" ");
      if (t == "after")e(s).after(o); else e(s).before(o)
    });
    this.syncCode()
  }, showVideo: function () {
    if (e.browser.msie)this.markerIE();
    this.modalInit(RLANG.video, this.opts.path + "/plugins/video.html", 600, e.proxy(function () {
      e("#redactor_insert_video_area").focus();
      e("#redactor_insert_video_btn").click(e.proxy(this.insertVideo, this))
    }, this))
  }, insertVideo: function () {
    var t = e("#redactor_insert_video_area").val();
    if (e.browser.msie) {
      e(this.doc.getElementById("span" + this.spanid)).after(t).remove();
      this.syncCode()
    } else this.execCommand("inserthtml", t);
    this.modalClose()
  }, imageEdit: function (t) {
    var n = e(t.target);
    var r = n.parent();
    var i = e.proxy(function () {
      e("#redactor_file_alt").val(n.attr("alt"));
      e("#redactor_image_edit_src").attr("href", n.attr("src"));
      e("#redactor_form_image_align").val(n.css("float"));
      if (e(r).get(0).tagName == "A")e("#redactor_file_link").val(e(r).attr("href"));
      e("#redactor_image_delete_btn").click(e.proxy(function () {
        this.imageDelete(n)
      }, this));
      e("#redactorSaveBtn").click(e.proxy(function () {
        this.imageSave(n)
      }, this))
    }, this);
    this.modalInit(RLANG.image, this.opts.path + "/plugins/image_edit.html", 380, i)
  }, imageDelete: function (t) {
    e(t).remove();
    this.modalClose();
    this.syncCode()
  }, imageSave: function (t) {
    var n = e(t).parent();
    e(t).attr("alt", e("#redactor_file_alt").val());
    var r = e("#redactor_form_image_align").val();
    if (r == "left")e(t).css({"float": "left", margin: "0 10px 10px 0"}); else if (r == "right")e(t).css({"float": "right", margin: "0 0 10px 10px"}); else e(t).css({"float": "none", margin: "0"});
    var i = e.trim(e("#redactor_file_link").val());
    if (i !== "") {
      if (e(n).get(0).tagName != "A") {
        e(t).replaceWith('<a href="' + i + '">' + this.outerHTML(t) + "</a>")
      } else {
        e(n).attr("href", i)
      }
    }
    this.modalClose();
    this.observeImages();
    this.syncCode()
  }, showImage: function () {
    if (e.browser.msie)this.markerIE();
    var t = e.proxy(function () {
      if (this.opts.imageGetJson !== false) {
        e.getJSON(this.opts.imageGetJson, e.proxy(function (t) {
          e.each(t, e.proxy(function (t, n) {
            var r = e('<img src="' + n.thumb + '" rel="' + n.image + '" />');
            e("#redactor_image_box").append(r);
            e(r).click(e.proxy(this.imageSetThumb, this))
          }, this))
        }, this))
      } else {
        e("#redactor_tabs a").eq(1).remove()
      }
      if (this.opts.imageUpload !== false) {
        if (e("#redactor_file").size() !== 0) {
          e("#redactor_file").dragupload({url: this.opts.imageUpload, success: e.proxy(this.imageUploadCallback, this)})
        }
        this.uploadInit("redactor_file", {auto: true, url: this.opts.imageUpload, success: e.proxy(this.imageUploadCallback, this)})
      } else {
        e(".redactor_tab").hide();
        if (this.opts.imageGetJson === false) {
          e("#redactor_tabs").remove();
          e("#redactor_tab3").show()
        } else {
          var t = e("#redactor_tabs a");
          t.eq(0).remove();
          t.eq(1).addClass("redactor_tabs_act");
          e("#redactor_tab2").show()
        }
      }
      e("#redactor_upload_btn").click(e.proxy(this.imageUploadCallbackLink, this))
    }, this);
    this.modalInit(RLANG.image, this.opts.path + "/plugins/image.html", 570, t, true)
  }, imageSetThumb: function (t) {
    this._imageSet('<img alt="" src="' + e(t.target).attr("rel") + '" />')
  }, imageUploadCallbackLink: function () {
    if (e("#redactor_file_link").val() !== "") {
      var t = '<img src="' + e("#redactor_file_link").val() + '" />';
      this._imageSet(t)
    } else this.modalClose()
  }, imageUploadCallback: function (e) {
    this._imageSet(e)
  }, _imageSet: function (t) {
    t = "<p>" + t + "</p>";
    this.focus();
    if (e.browser.msie) {
      e(this.doc.getElementById("span" + this.spanid)).after(t).remove();
      this.syncCode()
    } else {
      this.execCommand("inserthtml", t)
    }
    this.modalClose();
    this.observeImages()
  }, showLink: function () {
    var t = e.proxy(function () {
      var t = this.getSelection();
      if (e.browser.msie) {
        var n = this.getParentNode();
        if (n.nodeName == "A") {
          this.insert_link_node = e(n);
          var r = this.insert_link_node.text();
          var i = this.insert_link_node.attr("href")
        } else {
          if (this.oldIE())var r = t.text; else var r = t.toString();
          var i = "";
          this.spanid = Math.floor(Math.random() * 99999);
          var s = '<span id="span' + this.spanid + '">' + r + "</span>";
          if (r != "")s = '<span id="span' + this.spanid + '">' + r + "</span>";
          this.execCommand("inserthtml", s)
        }
      } else {
        if (t && t.anchorNode.parentNode.tagName == "A") {
          var i = t.anchorNode.parentNode.href;
          var r = t.anchorNode.parentNode.text;
          if (t.toString() === "")this.insert_link_node = t.anchorNode.parentNode
        } else {
          var r = t.toString();
          var i = ""
        }
      }
      e(".redactor_link_text").val(r);
      e("#redactor_link_url").val(i).focus();
      e("#redactor_insert_link_btn").click(e.proxy(this.insertLink, this));
      if (this.opts.linkFileUpload === false) {
        e("#redactor_tabs a").eq(3).remove()
      } else {
        if (e("#redactor_file").size() != 0) {
          e("#redactor_file").dragupload({url: this.opts.linkFileUpload, success: e.proxy(this.insertLinkFile, this)})
        }
        this.uploadInit("redactor_file", {auto: true, url: this.opts.linkFileUpload, success: e.proxy(this.insertLinkFile, this)})
      }
    }, this);
    this.modalInit(RLANG.link, this.opts.path + "/plugins/link.html", 460, t)
  }, insertLink: function () {
    var t = e("#redactor_tab_selected").val();
    var n = "", r = "";
    if (t == 1) {
      n = e("#redactor_link_url").val();
      r = e("#redactor_link_url_text").val()
    } else if (t == 2) {
      n = "mailto:" + e("#redactor_link_mailto").val();
      r = e("#redactor_link_mailto_text").val()
    } else if (t == 3) {
      n = "#" + e("#redactor_link_anchor").val();
      r = e("#redactor_link_anchor_text").val()
    }
    this._insertLink('<a href="' + n + '">' + r + "</a> ", e.trim(r), n)
  }, insertLinkFile: function (t) {
    text = e("#redactor_link_file_text").val();
    this._insertLink('<a href="' + t + '">' + text + "</a> ", e.trim(text), t)
  }, _insertLink: function (t, n, r) {
    if (n != "") {
      if (this.insert_link_node) {
        e(this.insert_link_node).text(n);
        e(this.insert_link_node).attr("href", r);
        this.syncCode()
      } else {
        if (e.browser.msie) {
          e(this.doc.getElementById("span" + this.spanid)).replaceWith(t);
          this.syncCode()
        } else this.execCommand("inserthtml", t)
      }
    }
    this.modalClose()
  }, showFile: function () {
    if (e.browser.msie)this.markerIE();
    var t = e.proxy(function () {
      e("#redactor_file").dragupload({url: this.opts.fileUpload, success: e.proxy(function (e) {
        this.fileUploadCallback(e)
      }, this)});
      this.uploadInit("redactor_file", {auto: true, url: this.opts.fileUpload, success: e.proxy(function (e) {
        this.fileUploadCallback(e)
      }, this)})
    }, this);
    this.modalInit(RLANG.file, this.opts.path + "/plugins/file.html", 500, t)
  }, fileUploadCallback: function (t) {
    if (e.browser.webkit && !!window.chrome)t = t + " ";
    if (e.browser.msie) {
      e(this.doc.getElementById("span" + this.spanid)).after(t).remove();
      this.syncCode()
    } else this.execCommand("inserthtml", t);
    this.modalClose()
  }, modalInit: function (t, n, r, i, s) {
    if (e("#redactor_modal_overlay").size() == 0) {
      this.overlay = e('<div id="redactor_modal_overlay" style="display: none;"></div>');
      e("body").prepend(this.overlay)
    }
    if (this.opts.overlay) {
      e("#redactor_modal_overlay").show();
      e("#redactor_modal_overlay").click(e.proxy(this.modalClose, this))
    }
    if (e("#redactor_modal").size() == 0) {
      this.modal = e('<div id="redactor_modal" style="display: none;"><div id="redactor_modal_close">×</div><div id="redactor_modal_header"></div><div id="redactor_modal_inner"></div></div>');
      e("body").append(this.modal)
    }
    e("#redactor_modal_close").click(e.proxy(this.modalClose, this));
    this.hdlModalClose = e.proxy(function (e) {
      if (e.keyCode == 27)this.modalClose()
    }, this);
    e(document).keyup(this.hdlModalClose);
    e(this.doc).keyup(this.hdlModalClose);
    e.ajax({dataType: "html", type: "get", url: n, success: e.proxy(function (n) {
      e.each(RLANG, function (e, t) {
        var r = new RegExp("%RLANG." + e + "%", "gi");
        n = n.replace(r, t)
      });
      e("#redactor_modal_inner").html(n);
      e("#redactor_modal_header").html(t);
      if (e("#redactor_tabs").size() != 0) {
        e("#redactor_tabs a").each(function (t, n) {
          t++;
          e(n).click(function () {
            e("#redactor_tabs a").removeClass("redactor_tabs_act");
            e(this).addClass("redactor_tabs_act");
            e(".redactor_tab").hide();
            e("#redactor_tab" + t).show();
            e("#redactor_tab_selected").val(t);
            var n = e("#redactor_modal").outerHeight();
            e("#redactor_modal").css("margin-top", "-" + (n + 10) / 2 + "px")
          })
        })
      }
      e("#redactor_btn_modal_close").click(e.proxy(this.modalClose, this));
      if (typeof i == "function")i();
      var o = e("#redactor_modal").outerHeight();
      r = r + 50;
      e("#redactor_modal").css({width: r + "px", height: "auto", marginTop: "-" + (o + 10) / 2 + "px", marginLeft: "-" + (r + 60) / 2 + "px"}).fadeIn("fast");
      if (s === true) {
        e("#redactor_image_box").height(300).css("overflow", "auto")
      }
    }, this)})
  }, modalClose: function () {
    e("#redactor_modal_close").unbind("click", this.modalClose);
    e("#redactor_modal").fadeOut("fast", e.proxy(function () {
      e("#redactor_modal_inner").html("");
      if (this.opts.overlay) {
        e("#redactor_modal_overlay").hide();
        e("#redactor_modal_overlay").unbind("click", this.modalClose)
      }
      e(document).unbind("keyup", this.hdlModalClose);
      e(this.doc).unbind("keyup", this.hdlModalClose)
    }, this))
  }, uploadInit: function (t, n) {
    this.uploadOptions = {url: false, success: false, start: false, trigger: false, auto: false, input: false};
    e.extend(this.uploadOptions, n);
    if (e("#" + t).size() != 0 && e("#" + t).get(0).tagName == "INPUT") {
      this.uploadOptions.input = e("#" + t);
      this.element = e(e("#" + t).get(0).form)
    } else {
      this.element = e("#" + t)
    }
    this.element_action = this.element.attr("action");
    if (this.uploadOptions.auto) {
      e(this.uploadOptions.input).change(e.proxy(function () {
        this.element.submit(function (e) {
          return false
        });
        this.uploadSubmit()
      }, this))
    } else if (this.uploadOptions.trigger) {
      e("#" + this.uploadOptions.trigger).click(e.proxy(this.uploadSubmit, this))
    }
  }, uploadSubmit: function () {
    this.uploadForm(this.element, this.uploadFrame())
  }, uploadFrame: function () {
    this.id = "f" + Math.floor(Math.random() * 99999);
    var t = document.createElement("div");
    var n = '<iframe style="display:none" src="about:blank" id="' + this.id + '" name="' + this.id + '"></iframe>';
    t.innerHTML = n;
    document.body.appendChild(t);
    if (this.uploadOptions.start)this.uploadOptions.start();
    e("#" + this.id).load(e.proxy(this.uploadLoaded, this));
    return this.id
  }, uploadForm: function (t, n) {
    if (this.uploadOptions.input) {
      var r = "redactorUploadForm" + this.id;
      var i = "redactorUploadFile" + this.id;
      this.form = e('<form  action="' + this.uploadOptions.url + '" method="POST" target="' + n + '" name="' + r + '" id="' + r + '" enctype="multipart/form-data"></form>');
      var s = this.uploadOptions.input;
      var o = e(s).clone();
      e(s).attr("id", i);
      e(s).before(o);
      e(s).appendTo(this.form);
      e(this.form).css("position", "absolute");
      e(this.form).css("top", "-2000px");
      e(this.form).css("left", "-2000px");
      e(this.form).appendTo("body");
      this.form.submit()
    } else {
      t.attr("target", n);
      t.attr("method", "POST");
      t.attr("enctype", "multipart/form-data");
      t.attr("action", this.uploadOptions.url);
      this.element.submit()
    }
  }, uploadLoaded: function () {
    var t = e("#" + this.id);
    if (t.contentDocument)var n = t.contentDocument; else if (t.contentWindow)var n = t.contentWindow.document; else var n = window.frames[this.id].document;
    if (n.location.href == "about:blank")return true;
    if (this.uploadOptions.success)this.uploadOptions.success(n.body.innerHTML);
    this.element.attr("action", this.element_action);
    this.element.attr("target", "")
  }, markerIE: function () {
    this.spanid = Math.floor(Math.random() * 99999);
    this.execCommand("inserthtml", '<span id="span' + this.spanid + '"></span>')
  }, oldIE: function () {
    if (e.browser.msie && parseInt(e.browser.version, 10) < 9)return true;
    return false
  }, outerHTML: function (t) {
    return e("<p>").append(e(t).eq(0).clone()).html()
  }, normalize: function (e) {
    return parseInt(e.replace("px", ""))
  }};
  e.fn.getDoc = function () {
    return e(this.data("redactor").doc)
  };
  e.fn.getFrame = function () {
    return this.data("redactor").$frame
  };
  e.fn.getEditor = function () {
    return this.data("redactor").$editor
  };
  e.fn.getCode = function () {
    return this.data("redactor").getCode()
  };
  e.fn.setCode = function (e) {
    this.data("redactor").setCode(e)
  };
  e.fn.insertHtml = function (e) {
    this.data("redactor").insertHtml(e)
  };
  e.fn.destroyEditor = function () {
    this.data("redactor").destroy();
    this.removeData("redactor")
  };
  e.fn.setFocus = function () {
    this.data("redactor").focus()
  };
  e.fn.execCommand = function (e, t) {
    this.data("redactor").execCommand(e, t)
  }
})(jQuery);
(function (e) {
  function t(t, n) {
    this.opts = e.extend({url: false, success: false, preview: false, text: RLANG.drop_file_here, atext: RLANG.or_choose}, n);
    this.$el = e(t)
  }

  e.fn.dragupload = function (e) {
    return this.each(function () {
      var n = new t(this, e);
      n.init()
    })
  };
  t.prototype = {init: function () {
    if (!e.browser.opera && !e.browser.msie) {
      this.droparea = e('<div class="redactor_droparea"></div>');
      this.dropareabox = e('<div class="redactor_dropareabox">' + this.opts.text + "</div>");
      this.dropalternative = e('<div class="redactor_dropalternative">' + this.opts.atext + "</div>");
      this.droparea.append(this.dropareabox);
      this.$el.before(this.droparea);
      this.$el.before(this.dropalternative);
      this.dropareabox.bind("dragover", e.proxy(function () {
        return this.ondrag()
      }, this));
      this.dropareabox.bind("dragleave", e.proxy(function () {
        return this.ondragleave()
      }, this));
      this.dropareabox.get(0).ondrop = e.proxy(function (t) {
        t.preventDefault();
        this.dropareabox.removeClass("hover").addClass("drop");
        var n = t.dataTransfer.files[0];
        var r = new FormData;
        r.append("file", n);
        e.ajax({dataType: "html", url: this.opts.url, data: r, cache: false, contentType: false, processData: false, type: "POST", success: e.proxy(function (e) {
          if (this.opts.success !== false)this.opts.success(e);
          if (this.opts.preview === true)this.dropareabox.html(e)
        }, this)})
      }, this)
    }
  }, ondrag: function () {
    this.dropareabox.addClass("hover");
    return false
  }, ondragleave: function () {
    this.dropareabox.removeClass("hover");
    return false
  }}
})(jQuery);
(function (e) {
  var t = /(^|<|\s)(www\..+?\..+?)(\s|>|$)/g, n = /(^|<|\s)(((https?|ftp):\/\/|mailto:).+?)(\s|>|$)/g, r = function () {
    var i = this.childNodes, s = i.length;
    while (s--) {
      var o = i[s];
      if (o.nodeType == 3) {
        var u = o.nodeValue;
        if (u) {
          u = u.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(t, '$1<a href="http://$2">$2</a>$3').replace(n, '$1<a href="$2">$2</a>$5');
          e(o).after(u).remove()
        }
      } else if (o.nodeType == 1 && !/^(a|button|textarea)$/i.test(o.tagName)) {
        r.call(o)
      }
    }
  };
  e.fn.linkify = function () {
    this.each(r)
  }
})(jQuery)